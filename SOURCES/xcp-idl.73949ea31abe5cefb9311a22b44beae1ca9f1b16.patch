commit 73949ea31abe5cefb9311a22b44beae1ca9f1b16
Author: David Scott <dave.scott@eu.citrix.com>
Date:   Thu Apr 23 20:30:04 2015 +0100

    Update to message-switch.0.11.0
    
    Signed-off-by: David Scott <dave.scott@eu.citrix.com>

diff --git a/lib/xcp_client.ml b/lib/xcp_client.ml
index 7eef272..c5bbec9 100644
--- a/lib/xcp_client.ml
+++ b/lib/xcp_client.ml
@@ -19,13 +19,22 @@ module Response = Cohttp.Response.Make(Cohttp_posix_io.Buffered_IO)
     
 let get_user_agent () = Sys.argv.(0)
 
-let switch_port = ref 8080
+let switch_path = ref "/var/run/message-switch/sock"
 let use_switch = ref true 
 
+let get_ok = function
+  | `Ok x -> x
+  | `Error e ->
+      let b = Buffer.create 16 in
+      let fmt = Format.formatter_of_buffer b in
+      Protocol_unix.Client.pp_error fmt e;
+      Format.pp_print_flush fmt ();
+      failwith (Buffer.contents b)
+
 let switch_rpc queue_name string_of_call response_of_string =
-	let c = Protocol_unix.Client.connect !switch_port in
+	let t = get_ok (Protocol_unix.Client.connect ~switch:!switch_path ()) in
 	fun call ->
-		response_of_string (Protocol_unix.Client.rpc c ~dest:queue_name (string_of_call call))
+		response_of_string (get_ok (Protocol_unix.Client.rpc ~t ~queue:queue_name ~body:(string_of_call call) ()))
 
 let split_colon str =
   try 
diff --git a/lib/xcp_service.ml b/lib/xcp_service.ml
index 156c9dc..a0c8ea3 100644
--- a/lib/xcp_service.ml
+++ b/lib/xcp_service.ml
@@ -146,7 +146,7 @@ let setify =
 
 let common_options = [
 	"use-switch", Arg.Bool (fun b -> Xcp_client.use_switch := b), (fun () -> string_of_bool !Xcp_client.use_switch), "true if the message switch is to be enabled";
-	"switch-port", Arg.Set_int Xcp_client.switch_port, (fun () -> string_of_int !Xcp_client.switch_port), "port on localhost where the message switch is listening";
+	"switch-path", Arg.Set_string Xcp_client.switch_path, (fun () -> !Xcp_client.switch_path), "Unix domain socket path on localhost where the message switch is listening";
 	"search-path", Arg.String (fun s -> extra_search_path := (split_c ':' s) @ !extra_search_path), (fun () -> String.concat ":" !extra_search_path), "Search path for resources";
 	"pidfile", Arg.Set_string pidfile, (fun () -> !pidfile), "Filename to write process PID";
 	"log", Arg.Set_string log_destination, (fun () -> !log_destination), "Where to write log messages";
@@ -495,7 +495,11 @@ let serve_forever = function
 		done
 	| Queue(queue_name, fn) ->
 		let process x = Jsonrpc.string_of_response (fn (Jsonrpc.call_of_string x)) in
-		Protocol_unix.Server.listen process !Xcp_client.switch_port queue_name
+		let _ = Protocol_unix.Server.listen ~process ~switch:!Xcp_client.switch_path ~queue:queue_name () in
+		let rec forever () =
+			Thread.delay 3600.;
+			forever () in
+		forever ()
 
 let pidfile_write filename =
 	let fd = Unix.openfile filename
